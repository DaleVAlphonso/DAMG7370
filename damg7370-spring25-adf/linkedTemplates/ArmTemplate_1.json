{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370-spring25-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_Fact_Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_PET_LC_FCT",
								"type": "DatasetReference"
							},
							"name": "PetMaxID"
						},
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sourceStg"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						},
						{
							"dataset": {
								"referenceName": "ds_DateDim",
								"type": "DatasetReference"
							},
							"name": "sourceDateDim"
						},
						{
							"dataset": {
								"referenceName": "ds_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PET_LC_FCT",
								"type": "DatasetReference"
							},
							"name": "sinkFact"
						}
					],
					"transformations": [
						{
							"name": "joinLocationDim"
						},
						{
							"name": "joinBreedDim"
						},
						{
							"name": "joinDateDim"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "joinToFact"
						},
						{
							"name": "RequiredColumns"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "AddColumns"
						},
						{
							"name": "FinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"70\")",
						"}",
						"source(output(",
						"          PET_LIC_SK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(PET_LC_SK),0) AS Pet_Lic_Sk FROM Seattle_Pet.PET_LC_FCT',",
						"     format: 'query') ~> PetMaxID",
						"source(output(",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceStg",
						"source(output(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"source(output(",
						"          DT as string,",
						"          ABRV_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as string,",
						"          END_DAY_OF_MONTH as string,",
						"          QUARTER_NUM as string,",
						"          DAY_OF_WEEK as string,",
						"          IS_WEEKEND as string,",
						"          YEAR_NUM as string,",
						"          MONTH_NUM as string,",
						"          DAY_NUM as string,",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDateDim",
						"source(output(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocationDim",
						"derivedColumn2, derivedColumn1 join(derivedColumn2@ZIP_CODE == derivedColumn1@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocationDim",
						"joinLocationDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreedDim",
						"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDateDim",
						"sourceLocationDim derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')) ~> derivedColumn1",
						"sourceStg derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')\r",
						") ~> derivedColumn2",
						"joinDateDim, PetMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinToFact",
						"joinToFact select(mapColumn(",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"RequiredColumns keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(PET_LIC_SK = PET_LIC_SK + RowNum,",
						"          DI_LOAD_DT = currentDate(),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> AddColumns",
						"AddColumns select(mapColumn(",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK,",
						"          DI_LOAD_DT,",
						"          DI_JOB_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalColumns",
						"FinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PET_LC_SK as string,",
						"          DATE_SK as string,",
						"          LOCATION_SK as string,",
						"          BREED_SK as string,",
						"          LIC_NUM as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          PET_LC_SK = PET_LIC_SK,",
						"          DATE_SK = DATE_DIM_SK,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          LIC_NUM = LICENSE_NUMBER,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sinkFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadBreedDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sourceSTAGEDATA"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "BreedDimMaxID"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sinkBreedDim"
						}
					],
					"transformations": [
						{
							"name": "SourecDataWithSK"
						},
						{
							"name": "aggregateBreedKeys"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "RequiredCols"
						},
						{
							"name": "joinToTarget"
						},
						{
							"name": "filterExitsingRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"61\")",
						"}",
						"source(output(",
						"          LICENSE_NUMBER as decimal(10,0),",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceSTAGEDATA",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK from SEATTLE_PET.BREED_DIM',",
						"     format: 'query') ~> BreedDimMaxID",
						"source(output(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"sourceSTAGEDATA, BreedDimMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourecDataWithSK",
						"SourecDataWithSK aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
						"filterExitsingRows keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
						"          DI_CREATED_DT = currentTimestamp(),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          BREED_SK,",
						"          DI_CREATED_DT,",
						"          DI_JOB_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredCols",
						"aggregateBreedKeys, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinToTarget",
						"joinToTarget filter(isNull(SPECIES_NAME) && isNull(PRIMARY_BREED_NAME) && isNull(SECONDARY_BREED_NAME)) ~> filterExitsingRows",
						"RequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          SPECIES_NAME = SPECIES,",
						"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
						"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
						"          DI_JOB_ID,",
						"          DI_CREATED_DATE = DI_CREATED_DT",
						"     )) ~> sinkBreedDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Location_dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_GeoDataFile",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "LoadLocationDim"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"62\")",
						"}",
						"source(output(",
						"          state_fips as string,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_CREATED_DT = toString(currentDate(), 'yyyy-MM-dd'),",
						"          DI_JOB_ID = 'DI'+ upper(right(uuid(),7))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK = SK_ID,",
						"          CITY = city,",
						"          STATE = state,",
						"          STATE_ABBR = state_abbr,",
						"          ZIP_CODE = zipcode,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = DI_CREATED_DT",
						"     )) ~> LoadLocationDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Seattle_Pet_License_CleanUp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText",
								"type": "DatasetReference"
							},
							"name": "FileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sinkSnowflake"
						},
						{
							"dataset": {
								"referenceName": "ds_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkParquet"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RequiredColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"60\"),",
						"     myFileName as string (\"pet_lic.parquet\")",
						"}",
						"source(output(",
						"          License_Issue_Date as date 'MM/dd/yyyy',",
						"          License_Number as string,",
						"          Animals_Name as string,",
						"          Species as string,",
						"          Primary_Breed as string,",
						"          Secondary_Breed as string,",
						"          ZIP_Code as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FileSource",
						"FileSource derive(Species = upper(Species),",
						"          Secondary_Breed = iifNull(Secondary_Breed,'Unknown'),",
						"          ZIP_Code = lpad(toString(ZIP_Code), 5, '0'),",
						"          Animals_Name = translate(Animals_Name, '()[]', ''),",
						"          License_Number = toInteger(translate(License_Number, 'S', '')),",
						"          DI_JOB_ID = $DI_JOB_ID,",
						"          LOAD_DT = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LICENSE_ISSUE_DATE = License_Issue_Date,",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = Animals_Name,",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = LOAD_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sinkSnowflake",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NYPD_CSV_TO_PARQUET_SNF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanNYPDArrestData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NYPD_Clean_Data_FROM_CSV",
								"type": "DataFlowReference",
								"parameters": {
									"Job_id_Param": {
										"value": "'@{substring(pipeline().RunId,1 ,10 )}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"readCSVfile": {
										"FileName": "NYPD_Arrest_Data__Year_to_Date__20250212.csv"
									},
									"GeographicalData": {},
									"sinkSnowflake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"myFileName": {
						"type": "String",
						"defaultValue": "pet_lic.parquet"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SEATTLE_PET_LIC_CLEAN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StageCleanData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Seattle_Pet_License_CleanUp",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"myFileName": "\"pet_lic.parquet\""
								},
								"datasetParameters": {
									"FileSource": {},
									"sinkSnowflake": {},
									"sinkParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_BreedDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StageCleanData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadBreedDim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceSTAGEDATA": {},
									"BreedDimMaxID": {},
									"sourceBreedDim": {},
									"sinkBreedDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_LocationDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load_BreedDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Location_dim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"LoadLocationDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_PETFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load_LocationDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Fact_Load",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PetMaxID": {},
									"sourceStg": {},
									"sourceBreedDim": {},
									"sourceDateDim": {},
									"sourceLocationDim": {},
									"sinkFact": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Seattle_Pet_License_CleanUp')]",
				"[concat(variables('factoryId'), '/dataflows/df_LoadBreedDim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Location_dim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Fact_Load')]"
			]
		}
	]
}