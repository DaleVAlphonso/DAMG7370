{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370-spring25-adf"
		},
		"AzureDataLakeStorage_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_LS'"
		},
		"ls_snowflake_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_snowflake'"
		},
		"AzureBlobStorage_LS_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage_LS'"
		},
		"AzureDataLakeStorage_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://damg7370spring2k25.dfs.core.windows.net/"
		},
		"AzureKeyVault_LS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://damg7370-kv.vault.azure.net/"
		},
		"ls_snowflake_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DAMG7370_DB"
		},
		"ls_snowflake_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "DATA_ENGINEER"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_NYPD_CSV_TO_PARQUET_SNF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanNYPDArrestData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NYPD_Clean_Data_FROM_CSV",
								"type": "DataFlowReference",
								"parameters": {
									"Job_id_Param": {
										"value": "'@{substring(pipeline().RunId,1 ,10 )}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"readCSVfile": {
										"FileName": "NYPD_Arrest_Data__Year_to_Date__20250212.csv"
									},
									"GeographicalData": {},
									"sinkSnowflake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"myFileName": {
						"type": "String",
						"defaultValue": "pet_lic.parquet"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/NYPD_Clean_Data_FROM_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SEATTLE_PET_LIC_CLEAN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StageCleanData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Seattle_Pet_License_CleanUp",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"myFileName": "\"pet_lic.parquet\""
								},
								"datasetParameters": {
									"FileSource": {},
									"sinkSnowflake": {},
									"sinkParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_BreedDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StageCleanData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadBreedDim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceSTAGEDATA": {},
									"BreedDimMaxID": {},
									"sourceBreedDim": {},
									"sinkBreedDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_LocationDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load_BreedDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Location_dim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"LoadLocationDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_PETFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Load_LocationDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Fact_Load",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PetMaxID": {},
									"sourceStg": {},
									"sourceBreedDim": {},
									"sourceDateDim": {},
									"sourceLocationDim": {},
									"sinkFact": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Seattle_Pet_License_CleanUp')]",
				"[concat(variables('factoryId'), '/dataflows/df_LoadBreedDim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Location_dim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Fact_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TSV_TO_PARQUET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Parquet_2_Snowflake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TSV_2_Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "Job_Id",
										"value": "$$FILEPATH"
									},
									{
										"name": "DI_Load_Date",
										"value": {
											"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')\n",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_LS",
									"type": "LinkedServiceReference"
								},
								"path": "snowstg"
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "SEATTLE_PET",
									"TableName": "PET_LICENSE_STAGE"
								}
							}
						]
					},
					{
						"name": "TSV_2_Parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('myFileName')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"myFileName": {
						"type": "String",
						"defaultValue": "pet_lic.parquet"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedGeoCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Geographical_dataset.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_Pet_Licenses.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "License_Issue_Date",
						"type": "String"
					},
					{
						"name": "License_Number",
						"type": "String"
					},
					{
						"name": "Animals_Name",
						"type": "String"
					},
					{
						"name": "Species",
						"type": "String"
					},
					{
						"name": "Primary_Breed",
						"type": "String"
					},
					{
						"name": "Secondary_Breed",
						"type": "String"
					},
					{
						"name": "ZIP_Code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NYPD_Arrest_Data__Year_to_Date__20250212.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "NYPD_ARREST",
					"table": "V2_NYPD_ARREST_STAGE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_BREED_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "BREED_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "SPECIES_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "PRIMARY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDARY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_CREATED_DATE",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "SEATTLE_PET",
					"table": "BREED_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_GeoDataFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "geo-data.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state_fips",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "state_abbr",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LOCATION_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CITY",
						"type": "VARCHAR"
					},
					{
						"name": "STATE",
						"type": "VARCHAR"
					},
					{
						"name": "STATE_ABBR",
						"type": "VARCHAR"
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "SEATTLE_PET",
					"table": "LOCATIION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PET_LC_FCT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "PET_LC_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "DATE_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "LOCATION_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "BREED_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "LIC_NUM",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "SEATTLE_PET",
					"table": "PET_LC_FCT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "pet_license.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_V2_PET_LICENSE_STAGE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LICENSE_NUMBER",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ANIMAL_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SPECIES",
						"type": "VARCHAR"
					},
					{
						"name": "PRIMARY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDARY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_LOAD_DT",
						"type": "DATE"
					},
					{
						"name": "ZIP_CODE",
						"type": "VARCHAR"
					},
					{
						"name": "LICENSE_ISSUE_DATE",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "SEATTLE_PET",
					"table": "V2_PET_LICENSE_STAGE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_LS_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Access my key vault from Azure Data Factory",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_LS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "zla80854.east-us-2.azure",
					"user": "DATAENG_DALE",
					"database": "[parameters('ls_snowflake_properties_typeProperties_database')]",
					"warehouse": "Temp_WH",
					"role": "[parameters('ls_snowflake_properties_typeProperties_role')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_snowflake_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DUMMY_Data_Clean_Data_FROM_CSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedTextCSV",
								"type": "DatasetReference"
							},
							"name": "readCSVfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "TransformToCleanData"
						},
						{
							"name": "JoinTable"
						},
						{
							"name": "GeographicalColumns"
						},
						{
							"name": "AggregateTransformation"
						},
						{
							"name": "MedianColumns"
						},
						{
							"name": "RequiredCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ARREST_KEY as integer,",
						"          ARREST_DATE as date 'MM/dd/yyyy',",
						"          PD_CD as integer,",
						"          PD_DESC as string,",
						"          KY_CD as integer,",
						"          OFNS_DESC as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as integer,",
						"          JURISDICTION_CODE as integer,",
						"          AGE_GROUP as string,",
						"          PERP_SEX as string,",
						"          PERP_RACE as string,",
						"          X_COORD_CD as integer,",
						"          Y_COORD_CD as integer,",
						"          Latitude as double,",
						"          Longitude as double,",
						"          {New Georeferenced Column} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readCSVfile",
						"readCSVfile derive(PD_CD = iif(or(isNull(PD_CD),PD_CD== 0),-1,PD_CD),",
						"          PD_DESC = iif(PD_DESC == '(null)', 'NO DESCRIPTION', PD_DESC),",
						"          KY_CD = iif(or(isNull(KY_CD),KY_CD== 0),-1,KY_CD),",
						"          OFNS_DESC = iif(OFNS_DESC == '(null)', 'NO DESCRIPTION', OFNS_DESC),",
						"          LAW_CAT_CD = iif(isNull(LAW_CAT_CD), \"UNKNOWN\",iif(LAW_CAT_CD == \"F\", \"Felony\",iif(LAW_CAT_CD == \"M\", \"Misdemeanor\",iif(LAW_CAT_CD == \"V\", \"Violation\", \"UNKNOWN\")\r",
						"        )\r",
						"    )\r",
						"),",
						"          ARREST_BORO = iif(ARREST_BORO == \"B\", \"BRONX\",\r",
						"    iif(ARREST_BORO == \"S\", \"STATEN ISLAND\",\r",
						"        iif(ARREST_BORO == \"K\", \"BROOKLYN\",\r",
						"            iif(ARREST_BORO == \"M\", \"MANHATTAN\",\r",
						"                iif(ARREST_BORO == \"Q\", \"QUEENS\", \"UNKNOWN\")\r",
						"            )\r",
						"        )\r",
						"    )\r",
						"),",
						"          Latitude = iif(isNull(Latitude) , toDouble(0), Latitude),",
						"          Longitude = iif(isNull(Longitude), toDouble(0), Longitude),",
						"          X_COORD_CD = iif(isNull(X_COORD_CD), toInteger(0), X_COORD_CD),",
						"          Y_COORD_CD = iif(isNull(Y_COORD_CD), toInteger(0), Y_COORD_CD)) ~> TransformToCleanData",
						"TransformToCleanData, RequiredCols join(TransformToCleanData@ARREST_BORO == RequiredCols@ARREST_BORO",
						"     && readCSVfile@ARREST_PRECINCT == RequiredCols@ARREST_PRECINCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTable",
						"TransformToCleanData select(mapColumn(",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          X_COORD_CD,",
						"          Y_COORD_CD,",
						"          Latitude,",
						"          Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> GeographicalColumns",
						"GeographicalColumns aggregate(groupBy(ARREST_BORO,",
						"          ARREST_PRECINCT),",
						"     X_COORD_CD = collect(X_COORD_CD),",
						"          X_COORD_CD_count = (countIf(X_COORD_CD != 0)),",
						"          Y_COORD_CD = collect(Y_COORD_CD),",
						"          Y_COORD_CD_count = (countIf(Y_COORD_CD != 0)),",
						"          Latitude = collect(iif(Latitude != 0, Latitude, toDouble(null()))),",
						"          Latitude_count = (countIf(Latitude != 0)),",
						"          Longitude = collect(Longitude),",
						"          Longitude_count = (countIf(Longitude != 0))) ~> AggregateTransformation",
						"AggregateTransformation derive(Median_X_COORD_CD = iif(X_COORD_CD_count%2==1,toInteger(X_COORD_CD[toInteger(round(X_COORD_CD_count+2)/2)]),toInteger((X_COORD_CD[toInteger(round(X_COORD_CD_count + 2) / 2)] + X_COORD_CD[toInteger(round(X_COORD_CD_count / 2))])/2)),",
						"          Median_Y_COORD_CD = iif(Y_COORD_CD_count%2==1,toInteger(Y_COORD_CD[toInteger(round(Y_COORD_CD_count+2)/2)]),toInteger((Y_COORD_CD[toInteger(round(Y_COORD_CD_count + 2) / 2)] + Y_COORD_CD[toInteger(round(Y_COORD_CD_count / 2))])/2)),",
						"          Median_Latitude = iif(Latitude_count%2==1,toDouble(Latitude[toInteger(round(Latitude_count+2)/2)]),toDouble((Latitude[toInteger(round(Latitude_count + 2) / 2)] + Latitude[toInteger(round(Latitude_count / 2))])/2)),",
						"          Median_Longitude = iif(Longitude_count%2==1,toDouble(Longitude[toInteger(round(Longitude_count+2)/2)]),toDouble((Longitude[toInteger(round(Longitude_count + 2) / 2)] + Longitude[toInteger(round(Longitude_count / 2))])/2))) ~> MedianColumns",
						"MedianColumns select(mapColumn(",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          Median_X_COORD_CD,",
						"          Median_Y_COORD_CD,",
						"          Median_Latitude,",
						"          Median_Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredCols",
						"RequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextCSV')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NYPD_Clean_Data_FROM_CSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedTextCSV",
								"type": "DatasetReference"
							},
							"name": "readCSVfile"
						},
						{
							"dataset": {
								"referenceName": "DelimitedGeoCSV",
								"type": "DatasetReference"
							},
							"name": "GeographicalData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference"
							},
							"name": "sinkSnowflake"
						}
					],
					"transformations": [
						{
							"name": "TransformToCleanData"
						},
						{
							"name": "JoinTable"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RequiredColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_id_Param as string (\"60\")",
						"}",
						"source(output(",
						"          ARREST_KEY as integer,",
						"          ARREST_DATE as date 'MM/dd/yyyy',",
						"          PD_CD as integer,",
						"          PD_DESC as string,",
						"          KY_CD as integer,",
						"          OFNS_DESC as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as integer,",
						"          JURISDICTION_CODE as integer,",
						"          AGE_GROUP as string,",
						"          PERP_SEX as string,",
						"          PERP_RACE as string,",
						"          X_COORD_CD as integer,",
						"          Y_COORD_CD as integer,",
						"          Latitude as double,",
						"          Longitude as double,",
						"          {New Georeferenced Column} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readCSVfile",
						"source(output(",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as integer,",
						"          MedianNo0_X_COORD_CD as integer,",
						"          MedianNo0_Y_COORD_CD as integer,",
						"          MedianNo0_Latitude as double,",
						"          MedianNo0_Longitude as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GeographicalData",
						"readCSVfile derive(PD_CD = iif(or(isNull(PD_CD),PD_CD== 0),-1,PD_CD),",
						"          PD_DESC = iif(PD_DESC == '(null)', 'NO DESCRIPTION', PD_DESC),",
						"          KY_CD = iif(or(isNull(KY_CD),KY_CD== 0),-1,KY_CD),",
						"          OFNS_DESC = iif(OFNS_DESC == '(null)', 'NO DESCRIPTION', OFNS_DESC),",
						"          LAW_CAT_CD = iif(isNull(LAW_CAT_CD), \"UNKNOWN\",iif(LAW_CAT_CD == \"F\", \"Felony\",iif(LAW_CAT_CD == \"M\", \"Misdemeanor\",iif(LAW_CAT_CD == \"V\", \"Violation\", \"UNKNOWN\")\r",
						"        )\r",
						"    )\r",
						"),",
						"          ARREST_BORO = iif(ARREST_BORO == \"B\", \"BRONX\",\r",
						"    iif(ARREST_BORO == \"S\", \"STATEN ISLAND\",\r",
						"        iif(ARREST_BORO == \"K\", \"BROOKLYN\",\r",
						"            iif(ARREST_BORO == \"M\", \"MANHATTAN\",\r",
						"                iif(ARREST_BORO == \"Q\", \"QUEENS\", \"UNKNOWN\")\r",
						"            )\r",
						"        )\r",
						"    )\r",
						"),",
						"          Latitude = iif(isNull(Latitude) , toDouble(0), Latitude),",
						"          Longitude = iif(isNull(Longitude), toDouble(0), Longitude),",
						"          X_COORD_CD = iif(isNull(X_COORD_CD), toInteger(0), X_COORD_CD),",
						"          Y_COORD_CD = iif(isNull(Y_COORD_CD), toInteger(0), Y_COORD_CD),",
						"          {New Georeferenced Column} = iif(or(isNull({New Georeferenced Column}),{New Georeferenced Column} == \"\"),\"NULL\",{New Georeferenced Column})) ~> TransformToCleanData",
						"TransformToCleanData, GeographicalData join(TransformToCleanData@ARREST_BORO == GeographicalData@ARREST_BORO",
						"     && readCSVfile@ARREST_PRECINCT == GeographicalData@ARREST_PRECINCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTable",
						"JoinTable derive(X_COORD_CD = iif(or(isNull(X_COORD_CD),X_COORD_CD==0),MedianNo0_X_COORD_CD,X_COORD_CD),",
						"          Y_COORD_CD = iif(or(isNull(Y_COORD_CD),Y_COORD_CD==0),MedianNo0_Y_COORD_CD,Y_COORD_CD),",
						"          Latitude = iif(or(isNull(Latitude),Latitude==0),MedianNo0_Latitude,Latitude),",
						"          Longitude = iif(or(isNull(Longitude),Longitude==0),MedianNo0_Longitude,Longitude),",
						"          {New Georeferenced Column} = iif(or({New Georeferenced Column}== \"NULL\", {New Georeferenced Column} == \"POINT (0 0)\"),\"POINT (\"+toString(MedianNo0_Longitude)+ \" \" + toString(MedianNo0_Latitude) + \")\" ,{New Georeferenced Column}),",
						"          Job_ID = $Job_id_Param,",
						"          Job_load_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ARREST_KEY,",
						"          ARREST_DATE,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          ARREST_BORO = TransformToCleanData@ARREST_BORO,",
						"          ARREST_PRECINCT = readCSVfile@ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          PERP_SEX,",
						"          PERP_RACE,",
						"          X_COORD_CD,",
						"          Y_COORD_CD,",
						"          LATITUDE = Latitude,",
						"          LONGITUDE = Longitude,",
						"          NEW_GEOREFERENCED_COLUMN = {New Georeferenced Column},",
						"          JOB_ID = Job_ID,",
						"          JOB_LOAD_DATE = Job_load_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          ARREST_KEY,",
						"          ARREST_DATE,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          PERP_SEX,",
						"          PERP_RACE,",
						"          X_COORD_CD,",
						"          Y_COORD_CD,",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          NEW_GEOREFERENCED_COLUMN,",
						"          JOB_ID,",
						"          JOB_LOAD_DATE",
						"     )) ~> sinkSnowflake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextCSV')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedGeoCSV')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fact_Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_PET_LC_FCT",
								"type": "DatasetReference"
							},
							"name": "PetMaxID"
						},
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sourceStg"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						},
						{
							"dataset": {
								"referenceName": "ds_DateDim",
								"type": "DatasetReference"
							},
							"name": "sourceDateDim"
						},
						{
							"dataset": {
								"referenceName": "ds_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PET_LC_FCT",
								"type": "DatasetReference"
							},
							"name": "sinkFact"
						}
					],
					"transformations": [
						{
							"name": "joinLocationDim"
						},
						{
							"name": "joinBreedDim"
						},
						{
							"name": "joinDateDim"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "joinToFact"
						},
						{
							"name": "RequiredColumns"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "AddColumns"
						},
						{
							"name": "FinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"70\")",
						"}",
						"source(output(",
						"          PET_LIC_SK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(PET_LC_SK),0) AS Pet_Lic_Sk FROM Seattle_Pet.PET_LC_FCT',",
						"     format: 'query') ~> PetMaxID",
						"source(output(",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceStg",
						"source(output(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"source(output(",
						"          DT as string,",
						"          ABRV_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as string,",
						"          END_DAY_OF_MONTH as string,",
						"          QUARTER_NUM as string,",
						"          DAY_OF_WEEK as string,",
						"          IS_WEEKEND as string,",
						"          YEAR_NUM as string,",
						"          MONTH_NUM as string,",
						"          DAY_NUM as string,",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDateDim",
						"source(output(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocationDim",
						"derivedColumn2, derivedColumn1 join(derivedColumn2@ZIP_CODE == derivedColumn1@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocationDim",
						"joinLocationDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreedDim",
						"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDateDim",
						"sourceLocationDim derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')) ~> derivedColumn1",
						"sourceStg derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')\r",
						") ~> derivedColumn2",
						"joinDateDim, PetMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinToFact",
						"joinToFact select(mapColumn(",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"RequiredColumns keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(PET_LIC_SK = PET_LIC_SK + RowNum,",
						"          DI_LOAD_DT = currentDate(),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> AddColumns",
						"AddColumns select(mapColumn(",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK,",
						"          DI_LOAD_DT,",
						"          DI_JOB_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalColumns",
						"FinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PET_LC_SK as string,",
						"          DATE_SK as string,",
						"          LOCATION_SK as string,",
						"          BREED_SK as string,",
						"          LIC_NUM as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          PET_LC_SK = PET_LIC_SK,",
						"          DATE_SK = DATE_DIM_SK,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          LIC_NUM = LICENSE_NUMBER,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sinkFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_PET_LC_FCT')]",
				"[concat(variables('factoryId'), '/datasets/ds_V2_PET_LICENSE_STAGE')]",
				"[concat(variables('factoryId'), '/datasets/ds_BREED_DIM')]",
				"[concat(variables('factoryId'), '/datasets/ds_DateDim')]",
				"[concat(variables('factoryId'), '/datasets/ds_LOCATION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadBreedDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sourceSTAGEDATA"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "BreedDimMaxID"
						},
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_BREED_DIM",
								"type": "DatasetReference"
							},
							"name": "sinkBreedDim"
						}
					],
					"transformations": [
						{
							"name": "SourecDataWithSK"
						},
						{
							"name": "aggregateBreedKeys"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "RequiredCols"
						},
						{
							"name": "joinToTarget"
						},
						{
							"name": "filterExitsingRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"61\")",
						"}",
						"source(output(",
						"          LICENSE_NUMBER as decimal(10,0),",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceSTAGEDATA",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK from SEATTLE_PET.BREED_DIM',",
						"     format: 'query') ~> BreedDimMaxID",
						"source(output(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"sourceSTAGEDATA, BreedDimMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourecDataWithSK",
						"SourecDataWithSK aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
						"filterExitsingRows keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
						"          DI_CREATED_DT = currentTimestamp(),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          BREED_SK,",
						"          DI_CREATED_DT,",
						"          DI_JOB_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredCols",
						"aggregateBreedKeys, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinToTarget",
						"joinToTarget filter(isNull(SPECIES_NAME) && isNull(PRIMARY_BREED_NAME) && isNull(SECONDARY_BREED_NAME)) ~> filterExitsingRows",
						"RequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_SK as string,",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          SPECIES_NAME = SPECIES,",
						"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
						"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
						"          DI_JOB_ID,",
						"          DI_CREATED_DATE = DI_CREATED_DT",
						"     )) ~> sinkBreedDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_V2_PET_LICENSE_STAGE')]",
				"[concat(variables('factoryId'), '/datasets/ds_BREED_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Location_dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_GeoDataFile",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "LoadLocationDim"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"62\")",
						"}",
						"source(output(",
						"          state_fips as string,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_CREATED_DT = toString(currentDate(), 'yyyy-MM-dd'),",
						"          DI_JOB_ID = 'DI'+ upper(right(uuid(),7))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK = SK_ID,",
						"          CITY = city,",
						"          STATE = state,",
						"          STATE_ABBR = state_abbr,",
						"          ZIP_CODE = zipcode,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = DI_CREATED_DT",
						"     )) ~> LoadLocationDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_GeoDataFile')]",
				"[concat(variables('factoryId'), '/datasets/ds_LOCATION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Seattle_Pet_License_CleanUp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText",
								"type": "DatasetReference"
							},
							"name": "FileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "sinkSnowflake"
						},
						{
							"dataset": {
								"referenceName": "ds_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkParquet"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RequiredColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"60\"),",
						"     myFileName as string (\"pet_lic.parquet\")",
						"}",
						"source(output(",
						"          License_Issue_Date as date 'MM/dd/yyyy',",
						"          License_Number as string,",
						"          Animals_Name as string,",
						"          Species as string,",
						"          Primary_Breed as string,",
						"          Secondary_Breed as string,",
						"          ZIP_Code as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FileSource",
						"FileSource derive(Species = upper(Species),",
						"          Secondary_Breed = iifNull(Secondary_Breed,'Unknown'),",
						"          ZIP_Code = lpad(toString(ZIP_Code), 5, '0'),",
						"          Animals_Name = translate(Animals_Name, '()[]', ''),",
						"          License_Number = toInteger(translate(License_Number, 'S', '')),",
						"          DI_JOB_ID = $DI_JOB_ID,",
						"          LOAD_DT = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LICENSE_ISSUE_DATE = License_Issue_Date,",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = Animals_Name,",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = LOAD_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string,",
						"          ZIP_CODE as string,",
						"          LICENSE_ISSUE_DATE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sinkSnowflake",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/ds_V2_PET_LICENSE_STAGE')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DateDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "DT",
						"type": "DATE"
					},
					{
						"name": "ABRV_DAY_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "MONTH_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "START_DAY_OF_MONTH",
						"type": "DATE"
					},
					{
						"name": "END_DAY_OF_MONTH",
						"type": "DATE"
					},
					{
						"name": "QUARTER_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DAY_OF_WEEK",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "IS_WEEKEND",
						"type": "NUMBER",
						"precision": 1,
						"scale": 0
					},
					{
						"name": "YEAR_NUM",
						"type": "NUMBER",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "MONTH_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DAY_NUM",
						"type": "NUMBER",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "DATE_DIM_SK",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SEATTLE_PET",
					"table": "DATE_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		}
	]
}