{
	"name": "Data_Clean_Data_FROM_CSV_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedTextCSV",
						"type": "DatasetReference"
					},
					"name": "readCSVfile"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "TransformToCleanData"
				},
				{
					"name": "JoinTable"
				},
				{
					"name": "GeographicalColumns"
				},
				{
					"name": "AggregateTransformation"
				},
				{
					"name": "MedianColumns"
				},
				{
					"name": "RequiredCols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ARREST_KEY as integer,",
				"          ARREST_DATE as date 'MM/dd/yyyy',",
				"          PD_CD as integer,",
				"          PD_DESC as string,",
				"          KY_CD as integer,",
				"          OFNS_DESC as string,",
				"          LAW_CODE as string,",
				"          LAW_CAT_CD as string,",
				"          ARREST_BORO as string,",
				"          ARREST_PRECINCT as integer,",
				"          JURISDICTION_CODE as integer,",
				"          AGE_GROUP as string,",
				"          PERP_SEX as string,",
				"          PERP_RACE as string,",
				"          X_COORD_CD as integer,",
				"          Y_COORD_CD as integer,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          {New Georeferenced Column} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> readCSVfile",
				"readCSVfile derive(PD_CD = iif(or(isNull(PD_CD),PD_CD== 0),-1,PD_CD),",
				"          PD_DESC = iif(PD_DESC == '(null)', 'NO DESCRIPTION', PD_DESC),",
				"          KY_CD = iif(or(isNull(KY_CD),KY_CD== 0),-1,KY_CD),",
				"          OFNS_DESC = iif(OFNS_DESC == '(null)', 'NO DESCRIPTION', OFNS_DESC),",
				"          LAW_CAT_CD = iif(isNull(LAW_CAT_CD), \"UNKNOWN\",iif(LAW_CAT_CD == \"F\", \"Felony\",iif(LAW_CAT_CD == \"M\", \"Misdemeanor\",iif(LAW_CAT_CD == \"V\", \"Violation\", \"UNKNOWN\")\r",
				"        )\r",
				"    )\r",
				"),",
				"          ARREST_BORO = iif(ARREST_BORO == \"B\", \"BRONX\",\r",
				"    iif(ARREST_BORO == \"S\", \"STATEN ISLAND\",\r",
				"        iif(ARREST_BORO == \"K\", \"BROOKLYN\",\r",
				"            iif(ARREST_BORO == \"M\", \"MANHATTAN\",\r",
				"                iif(ARREST_BORO == \"Q\", \"QUEENS\", \"UNKNOWN\")\r",
				"            )\r",
				"        )\r",
				"    )\r",
				"),",
				"          Latitude = iif(isNull(Latitude) , toDouble(0), Latitude),",
				"          Longitude = iif(isNull(Longitude), toDouble(0), Longitude),",
				"          X_COORD_CD = iif(isNull(X_COORD_CD), toInteger(0), X_COORD_CD),",
				"          Y_COORD_CD = iif(isNull(Y_COORD_CD), toInteger(0), Y_COORD_CD)) ~> TransformToCleanData",
				"TransformToCleanData, RequiredCols join(TransformToCleanData@ARREST_BORO == RequiredCols@ARREST_BORO",
				"     && readCSVfile@ARREST_PRECINCT == RequiredCols@ARREST_PRECINCT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTable",
				"TransformToCleanData select(mapColumn(",
				"          ARREST_BORO,",
				"          ARREST_PRECINCT,",
				"          X_COORD_CD,",
				"          Y_COORD_CD,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> GeographicalColumns",
				"GeographicalColumns aggregate(groupBy(ARREST_BORO,",
				"          ARREST_PRECINCT),",
				"     X_COORD_CD = collect(X_COORD_CD),",
				"          X_COORD_CD_count = (countIf(X_COORD_CD != 0)),",
				"          Y_COORD_CD = collect(Y_COORD_CD),",
				"          Y_COORD_CD_count = (countIf(Y_COORD_CD != 0)),",
				"          Latitude = collect(iif(Latitude != 0, Latitude, toDouble(null()))),",
				"          Latitude_count = (countIf(Latitude != 0)),",
				"          Longitude = collect(Longitude),",
				"          Longitude_count = (countIf(Longitude != 0))) ~> AggregateTransformation",
				"AggregateTransformation derive(Median_X_COORD_CD = iif(X_COORD_CD_count%2==1,toInteger(X_COORD_CD[toInteger(round(X_COORD_CD_count+2)/2)]),toInteger((X_COORD_CD[toInteger(round(X_COORD_CD_count + 2) / 2)] + X_COORD_CD[toInteger(round(X_COORD_CD_count / 2))])/2)),",
				"          Median_Y_COORD_CD = iif(Y_COORD_CD_count%2==1,toInteger(Y_COORD_CD[toInteger(round(Y_COORD_CD_count+2)/2)]),toInteger((Y_COORD_CD[toInteger(round(Y_COORD_CD_count + 2) / 2)] + Y_COORD_CD[toInteger(round(Y_COORD_CD_count / 2))])/2)),",
				"          Median_Latitude = iif(Latitude_count%2==1,toDouble(Latitude[toInteger(round(Latitude_count+2)/2)]),toDouble((Latitude[toInteger(round(Latitude_count + 2) / 2)] + Latitude[toInteger(round(Latitude_count / 2))])/2)),",
				"          Median_Longitude = iif(Longitude_count%2==1,toDouble(Longitude[toInteger(round(Longitude_count+2)/2)]),toDouble((Longitude[toInteger(round(Longitude_count + 2) / 2)] + Longitude[toInteger(round(Longitude_count / 2))])/2))) ~> MedianColumns",
				"MedianColumns select(mapColumn(",
				"          ARREST_BORO,",
				"          ARREST_PRECINCT,",
				"          Median_X_COORD_CD,",
				"          Median_Y_COORD_CD,",
				"          Median_Latitude,",
				"          Median_Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RequiredCols"
			]
		}
	}
}