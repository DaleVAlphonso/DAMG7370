{
	"name": "df_Fact_Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_PET_LC_FCT",
						"type": "DatasetReference"
					},
					"name": "PetMaxID"
				},
				{
					"dataset": {
						"referenceName": "ds_V2_PET_LICENSE_STAGE",
						"type": "DatasetReference"
					},
					"name": "sourceStg"
				},
				{
					"dataset": {
						"referenceName": "ds_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "ds_DateDim",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				},
				{
					"dataset": {
						"referenceName": "ds_LOCATION_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "joinLocationDim"
				},
				{
					"name": "joinBreedDim"
				},
				{
					"name": "joinDateDim"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "joinToFact"
				},
				{
					"name": "RequiredColumns"
				},
				{
					"name": "AddColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PET_LIC_SK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LC_SK),0) AS Pet_Lic_Sk FROM Seattle_Pet.PET_LC_FCT',",
				"     format: 'query') ~> PetMaxID",
				"source(output(",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string,",
				"          ZIP_CODE as string,",
				"          LICENSE_ISSUE_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStg",
				"source(output(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"derivedColumn2, derivedColumn1 join(derivedColumn2@ZIP_CODE == derivedColumn1@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDim",
				"joinLocationDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDim",
				"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDim",
				"sourceLocationDim derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')) ~> derivedColumn1",
				"sourceStg derive(ZIP_CODE = lpad(trim(toString(ZIP_CODE)), 5, '0')\r",
				") ~> derivedColumn2",
				"RequiredColumns keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"joinDateDim, PetMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinToFact",
				"AddColumns select(mapColumn(",
				"          LIC_NUM = LICENSE_NUMBER,",
				"          DI_JOB_ID = sourceStg@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceStg@DI_LOAD_DT,",
				"          LICENSE_ISSUE_DATE,",
				"          LOCATION_SK,",
				"          CITY,",
				"          STATE,",
				"          STATE_ABBR,",
				"          ZIP_CODE = derivedColumn1@ZIP_CODE,",
				"          DI_JOB_ID = sourceLocationDim@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceLocationDim@DI_LOAD_DT,",
				"          BREED_SK,",
				"          SPECIES_NAME,",
				"          PRIMARY_BREED_NAME,",
				"          SECONDARY_BREED_NAME,",
				"          DI_JOB_ID = sourceBreedDim@DI_JOB_ID,",
				"          DI_CREATED_DATE,",
				"          DT,",
				"          ABRV_DAY_NAME,",
				"          MONTH_NAME,",
				"          START_DAY_OF_MONTH,",
				"          END_DAY_OF_MONTH,",
				"          QUARTER_NUM,",
				"          DAY_OF_WEEK,",
				"          IS_WEEKEND,",
				"          YEAR_NUM,",
				"          MONTH_NUM,",
				"          DAY_NUM,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
				"joinToFact derive(PET_LC_SK = ERROR_FUNCTION('')) ~> AddColumns"
			]
		}
	}
}